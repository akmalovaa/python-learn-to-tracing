services:
  python_app:
    container_name: app
    build:
      dockerfile: Dockerfile
      context: python_app
    ports:
      - 8000:8000
    depends_on:
      - db
    # volumes:
    #   - ./python_app:/app/
    # command: ["tail", "-f", "/dev/null"]
    # command: ["python", "-m", "python_app"]

  frontend:
    container_name: frontend
    build:
      dockerfile: Dockerfile
      context: front
    ports:
      - 80:80
    depends_on:
      - python_app

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector:0.112.0
    ports:
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      # - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
    volumes:
      - ./configs/otel/config.yaml:/etc/otelcol/config.yaml

  grafana:
    image: grafana/grafana:10.4.11
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_USERS_DEFAULT_THEME: "dark"
    volumes:
      - ./configs/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/provisioning-datasources.yaml:ro
    depends_on:
      - tempo

  tempo:
    image: grafana/tempo:2.8.1
    container_name: tempo
    command: ["-config.file=/etc/tempo-local.yaml"]
    ports:
      - 3200:3200 # tempo http
      - 9095:9095 # tempo grpc
      - 14268:14268 # jaeger ingest
      # - 4318:4318   # otlp http
      # - 4317:4317 # otlp grpc
    volumes:
      - ./configs/tempo/tempo-local.yaml:/etc/tempo-local.yaml

  prometheus:
    image: prom/prometheus:v3.4.2
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    ports:
      - 9090:9090
    volumes:
      - ./configs/prometheus/prometheus.yaml:/etc/prometheus.yaml

  redis:
    image: redis
    ports:
      - 6379:6379
    restart: always

  db:
    restart: always
    container_name: db
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: opg_user
      POSTGRES_PASSWORD: opg_password
      POSTGRES_DB: opg_db
    volumes:
      - prometheus:/var/lib/postgresql/data

volumes:
  prometheus: {}

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   volumes:
  #     - ./zoo/data:/var/lib/zookeeper/data
  #     - ./zoo/log:/var/lib/zookeeper/log

  # kafka:
  #   image: confluentinc/cp-enterprise-kafka:latest
  #   hostname: kafka
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_DELETE_TOPIC_ENABLE: "true"
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #   volumes:
  #     - ./broker/data:/var/lib/kafka/data
